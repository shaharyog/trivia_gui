// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'request/create_room.dart';
import 'request/get_room_players.dart';
import 'request/get_rooms.dart';
import 'request/get_user_data.dart';
import 'request/login.dart';
import 'request/signup.dart';
import 'request/update_user_data.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>>
@sealed
class Session extends RustOpaque {
  Session.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Session.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Session,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Session,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SessionPtr,
  );

  Future<void> createRoom({required RoomData roomData, dynamic hint}) =>
      RustLib.instance.api
          .sessionCreateRoom(that: this, roomData: roomData, hint: hint);

  Future<List<Player>> getRoomPlayers({required String roomId, dynamic hint}) =>
      RustLib.instance.api
          .sessionGetRoomPlayers(that: this, roomId: roomId, hint: hint);

  Future<List<Room>> getRooms({dynamic hint}) =>
      RustLib.instance.api.sessionGetRooms(that: this, hint: hint);

  Future<UserDataAndStatistics> getUserData({dynamic hint}) =>
      RustLib.instance.api.sessionGetUserData(that: this, hint: hint);

  static Future<Session> login(
          {required LoginRequest loginRequest,
          required String address,
          dynamic hint}) =>
      RustLib.instance.api.sessionLogin(
          loginRequest: loginRequest, address: address, hint: hint);

  Future<void> logout({dynamic hint}) =>
      RustLib.instance.api.sessionLogout(that: this, hint: hint);

  static Future<Session> signup(
          {required SignupRequest signupRequest,
          required String address,
          dynamic hint}) =>
      RustLib.instance.api.sessionSignup(
          signupRequest: signupRequest, address: address, hint: hint);

  Future<void> updateUserData(
          {required UpdateUserDataRequest updateUserDataRequest,
          dynamic hint}) =>
      RustLib.instance.api.sessionUpdateUserData(
          that: this, updateUserDataRequest: updateUserDataRequest, hint: hint);
}
