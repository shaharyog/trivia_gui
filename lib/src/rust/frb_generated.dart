// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/error.dart';
import 'api/request/get_user_data.dart';
import 'api/request/login.dart';
import 'api/request/signup.dart';
import 'api/request/update_user_data.dart';
import 'api/session.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.33';

  @override
  int get rustContentHash => -1378054505;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_trivia',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String errorFormat({required Error that, dynamic hint});

  Future<UserData> sessionGetUserData({required Session that, dynamic hint});

  Future<Session> sessionLogin(
      {required LoginRequest loginRequest,
      required String address,
      dynamic hint});

  Future<void> sessionLogout({required Session that, dynamic hint});

  Future<Session> sessionSignup(
      {required SignupRequest signupRequest,
      required String address,
      dynamic hint});

  Future<void> sessionUpdateUserData(
      {required Session that,
      required UpdateUserDataRequest updateUserDataRequest,
      dynamic hint});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Session;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Session;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SessionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String errorFormat({required Error that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_error(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kErrorFormatConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kErrorFormatConstMeta => const TaskConstMeta(
        debugName: "error_format",
        argNames: ["that"],
      );

  @override
  Future<UserData> sessionGetUserData({required Session that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_data,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kSessionGetUserDataConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSessionGetUserDataConstMeta => const TaskConstMeta(
        debugName: "Session_get_user_data",
        argNames: ["that"],
      );

  @override
  Future<Session> sessionLogin(
      {required LoginRequest loginRequest,
      required String address,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_login_request(loginRequest, serializer);
        sse_encode_String(address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kSessionLoginConstMeta,
      argValues: [loginRequest, address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSessionLoginConstMeta => const TaskConstMeta(
        debugName: "Session_login",
        argNames: ["loginRequest", "address"],
      );

  @override
  Future<void> sessionLogout({required Session that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kSessionLogoutConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSessionLogoutConstMeta => const TaskConstMeta(
        debugName: "Session_logout",
        argNames: ["that"],
      );

  @override
  Future<Session> sessionSignup(
      {required SignupRequest signupRequest,
      required String address,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_signup_request(signupRequest, serializer);
        sse_encode_String(address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kSessionSignupConstMeta,
      argValues: [signupRequest, address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSessionSignupConstMeta => const TaskConstMeta(
        debugName: "Session_signup",
        argNames: ["signupRequest", "address"],
      );

  @override
  Future<void> sessionUpdateUserData(
      {required Session that,
      required UpdateUserDataRequest updateUserDataRequest,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        sse_encode_box_autoadd_update_user_data_request(
            updateUserDataRequest, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kSessionUpdateUserDataConstMeta,
      argValues: [that, updateUserDataRequest],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSessionUpdateUserDataConstMeta => const TaskConstMeta(
        debugName: "Session_update_user_data",
        argNames: ["that", "updateUserDataRequest"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Session => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Session => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession;

  @protected
  Session
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Session.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Session
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Session.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  Session
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Session.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Error dco_decode_box_autoadd_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_error(raw);
  }

  @protected
  LoginRequest dco_decode_box_autoadd_login_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_login_request(raw);
  }

  @protected
  SignupRequest dco_decode_box_autoadd_signup_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_signup_request(raw);
  }

  @protected
  UpdateUserDataRequest dco_decode_box_autoadd_update_user_data_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_user_data_request(raw);
  }

  @protected
  Error dco_decode_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Error_ServerConnectionError(
          dco_decode_String(raw[1]),
        );
      case 1:
        return Error_RequestSerializationError(
          dco_decode_String(raw[1]),
        );
      case 2:
        return Error_ResponseDeserializationError(
          dco_decode_String(raw[1]),
        );
      case 3:
        return Error_RequestTooBig();
      case 4:
        return Error_ResponseError(
          dco_decode_String(raw[1]),
        );
      case 5:
        return Error_InvalidResponseCode(
          dco_decode_u_8(raw[1]),
        );
      case 6:
        return Error_LoginError(
          dco_decode_String(raw[1]),
        );
      case 7:
        return Error_SignupError(
          dco_decode_String(raw[1]),
        );
      case 8:
        return Error_LogoutError();
      case 9:
        return Error_InvalidAddress(
          dco_decode_String(raw[1]),
        );
      case 10:
        return Error_InternalServerError();
      case 11:
        return Error_UpdateUserDataError(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  LoginRequest dco_decode_login_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LoginRequest(
      username: dco_decode_String(arr[0]),
      password: dco_decode_String(arr[1]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  SignupRequest dco_decode_signup_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return SignupRequest(
      username: dco_decode_String(arr[0]),
      password: dco_decode_String(arr[1]),
      email: dco_decode_String(arr[2]),
      address: dco_decode_String(arr[3]),
      phoneNumber: dco_decode_String(arr[4]),
      birthday: dco_decode_String(arr[5]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UpdateUserDataRequest dco_decode_update_user_data_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UpdateUserDataRequest(
      password: dco_decode_opt_String(arr[0]),
      email: dco_decode_String(arr[1]),
      address: dco_decode_String(arr[2]),
      phoneNumber: dco_decode_String(arr[3]),
      avatarColor: dco_decode_String(arr[4]),
    );
  }

  @protected
  UserData dco_decode_user_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return UserData(
      username: dco_decode_String(arr[0]),
      email: dco_decode_String(arr[1]),
      address: dco_decode_String(arr[2]),
      phoneNumber: dco_decode_String(arr[3]),
      birthday: dco_decode_String(arr[4]),
      avatarColor: dco_decode_String(arr[5]),
      memberSince: dco_decode_Chrono_Naive(arr[6]),
    );
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  Session
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Session.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Session
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Session.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner, isUtc: true);
  }

  @protected
  Session
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Session.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Error sse_decode_box_autoadd_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_error(deserializer));
  }

  @protected
  LoginRequest sse_decode_box_autoadd_login_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_login_request(deserializer));
  }

  @protected
  SignupRequest sse_decode_box_autoadd_signup_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_signup_request(deserializer));
  }

  @protected
  UpdateUserDataRequest sse_decode_box_autoadd_update_user_data_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_user_data_request(deserializer));
  }

  @protected
  Error sse_decode_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return Error_ServerConnectionError(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return Error_RequestSerializationError(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return Error_ResponseDeserializationError(var_field0);
      case 3:
        return Error_RequestTooBig();
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return Error_ResponseError(var_field0);
      case 5:
        var var_field0 = sse_decode_u_8(deserializer);
        return Error_InvalidResponseCode(var_field0);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return Error_LoginError(var_field0);
      case 7:
        var var_field0 = sse_decode_String(deserializer);
        return Error_SignupError(var_field0);
      case 8:
        return Error_LogoutError();
      case 9:
        var var_field0 = sse_decode_String(deserializer);
        return Error_InvalidAddress(var_field0);
      case 10:
        return Error_InternalServerError();
      case 11:
        var var_field0 = sse_decode_String(deserializer);
        return Error_UpdateUserDataError(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LoginRequest sse_decode_login_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    var var_password = sse_decode_String(deserializer);
    return LoginRequest(username: var_username, password: var_password);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SignupRequest sse_decode_signup_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    var var_password = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_phoneNumber = sse_decode_String(deserializer);
    var var_birthday = sse_decode_String(deserializer);
    return SignupRequest(
        username: var_username,
        password: var_password,
        email: var_email,
        address: var_address,
        phoneNumber: var_phoneNumber,
        birthday: var_birthday);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UpdateUserDataRequest sse_decode_update_user_data_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_password = sse_decode_opt_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_phoneNumber = sse_decode_String(deserializer);
    var var_avatarColor = sse_decode_String(deserializer);
    return UpdateUserDataRequest(
        password: var_password,
        email: var_email,
        address: var_address,
        phoneNumber: var_phoneNumber,
        avatarColor: var_avatarColor);
  }

  @protected
  UserData sse_decode_user_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_phoneNumber = sse_decode_String(deserializer);
    var var_birthday = sse_decode_String(deserializer);
    var var_avatarColor = sse_decode_String(deserializer);
    var var_memberSince = sse_decode_Chrono_Naive(deserializer);
    return UserData(
        username: var_username,
        email: var_email,
        address: var_address,
        phoneNumber: var_phoneNumber,
        birthday: var_birthday,
        avatarColor: var_avatarColor,
        memberSince: var_memberSince);
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          Session self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          Session self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.microsecondsSinceEpoch, serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          Session self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_error(Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_login_request(
      LoginRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_login_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_signup_request(
      SignupRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_signup_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_user_data_request(
      UpdateUserDataRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_user_data_request(self, serializer);
  }

  @protected
  void sse_encode_error(Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Error_ServerConnectionError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case Error_RequestSerializationError(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case Error_ResponseDeserializationError(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case Error_RequestTooBig():
        sse_encode_i_32(3, serializer);
      case Error_ResponseError(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case Error_InvalidResponseCode(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_u_8(field0, serializer);
      case Error_LoginError(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case Error_SignupError(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field0, serializer);
      case Error_LogoutError():
        sse_encode_i_32(8, serializer);
      case Error_InvalidAddress(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_String(field0, serializer);
      case Error_InternalServerError():
        sse_encode_i_32(10, serializer);
      case Error_UpdateUserDataError(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_login_request(LoginRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.password, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_signup_request(SignupRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.password, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.phoneNumber, serializer);
    sse_encode_String(self.birthday, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_update_user_data_request(
      UpdateUserDataRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.password, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.phoneNumber, serializer);
    sse_encode_String(self.avatarColor, serializer);
  }

  @protected
  void sse_encode_user_data(UserData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.phoneNumber, serializer);
    sse_encode_String(self.birthday, serializer);
    sse_encode_String(self.avatarColor, serializer);
    sse_encode_Chrono_Naive(self.memberSince, serializer);
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
