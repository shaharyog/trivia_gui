// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::session::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.33";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 422255802;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_error_format_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "error_format",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::error::Error>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(crate::api::error::Error::format(&api_that))
            })())
        },
    )
}
fn wire_Session_create_room_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_create_room",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>,
            >>::sse_decode(&mut deserializer);
            let api_room_data =
                <crate::api::request::create_room::RoomData>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_that_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(
                            vec![api_that.rust_auto_opaque_lock_order_info(0, true)],
                        );
                    for i in decode_indices_ {
                        match i {
                            0 => {
                                api_that_decoded =
                                    Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                            }
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that = api_that_decoded.unwrap();
                    crate::api::session::Session::create_room(&mut api_that, api_room_data)
                })())
            }
        },
    )
}
fn wire_Session_get_highscores_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_get_highscores",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_that_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(
                            vec![api_that.rust_auto_opaque_lock_order_info(0, true)],
                        );
                    for i in decode_indices_ {
                        match i {
                            0 => {
                                api_that_decoded =
                                    Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                            }
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that = api_that_decoded.unwrap();
                    crate::api::session::Session::get_highscores(&mut api_that)
                })())
            }
        },
    )
}
fn wire_Session_get_room_players_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_get_room_players",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>,
            >>::sse_decode(&mut deserializer);
            let api_room_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_that_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(
                            vec![api_that.rust_auto_opaque_lock_order_info(0, true)],
                        );
                    for i in decode_indices_ {
                        match i {
                            0 => {
                                api_that_decoded =
                                    Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                            }
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that = api_that_decoded.unwrap();
                    crate::api::session::Session::get_room_players(&mut api_that, api_room_id)
                })())
            }
        },
    )
}
fn wire_Session_get_rooms_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_get_rooms",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_that_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(
                            vec![api_that.rust_auto_opaque_lock_order_info(0, true)],
                        );
                    for i in decode_indices_ {
                        match i {
                            0 => {
                                api_that_decoded =
                                    Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                            }
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that = api_that_decoded.unwrap();
                    crate::api::session::Session::get_rooms(&mut api_that)
                })())
            }
        },
    )
}
fn wire_Session_get_user_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_get_user_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_that_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(
                            vec![api_that.rust_auto_opaque_lock_order_info(0, true)],
                        );
                    for i in decode_indices_ {
                        match i {
                            0 => {
                                api_that_decoded =
                                    Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                            }
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that = api_that_decoded.unwrap();
                    crate::api::session::Session::get_user_data(&mut api_that)
                })())
            }
        },
    )
}
fn wire_Session_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_login_request =
                <crate::api::request::login::LoginRequest>::sse_decode(&mut deserializer);
            let api_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::session::Session::login(api_login_request, api_address)
                })())
            }
        },
    )
}
fn wire_Session_logout_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_logout",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <Session>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::session::Session::logout(api_that))())
            }
        },
    )
}
fn wire_Session_signup_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_signup",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_signup_request =
                <crate::api::request::signup::SignupRequest>::sse_decode(&mut deserializer);
            let api_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::session::Session::signup(api_signup_request, api_address)
                })())
            }
        },
    )
}
fn wire_Session_update_user_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Session_update_user_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>,
            >>::sse_decode(&mut deserializer);
            let api_update_user_data_request =
                <crate::api::request::update_user_data::UpdateUserDataRequest>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_that_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(
                            vec![api_that.rust_auto_opaque_lock_order_info(0, true)],
                        );
                    for i in decode_indices_ {
                        match i {
                            0 => {
                                api_that_decoded =
                                    Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                            }
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that = api_that_decoded.unwrap();
                    crate::api::session::Session::update_user_data(
                        &mut api_that,
                        api_update_user_data_request,
                    )
                })())
            }
        },
    )
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>
);

// Section: dart2rust

impl SseDecode for Session {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::NaiveDateTime::from_timestamp_micros(inner)
            .expect("invalid or out-of-range datetime");
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::error::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::ServerConnectionError(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::RequestSerializationError(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::ResponseDeserializationError(var_field0);
            }
            3 => {
                return crate::api::error::Error::RequestTooBig;
            }
            4 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::ResponseError(var_field0);
            }
            5 => {
                let mut var_field0 = <u8>::sse_decode(deserializer);
                return crate::api::error::Error::InvalidResponseCode(var_field0);
            }
            6 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::LoginError(var_field0);
            }
            7 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::SignupError(var_field0);
            }
            8 => {
                return crate::api::error::Error::LogoutError;
            }
            9 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::InvalidAddress(var_field0);
            }
            10 => {
                return crate::api::error::Error::InternalServerError;
            }
            11 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::UpdateUserDataError(var_field0);
            }
            12 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::Error::InvalidRoomId(var_field0);
            }
            13 => {
                return crate::api::error::Error::CouldNotCreateRoom;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::api::request::get_room_players::Player> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::request::get_room_players::Player>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::request::get_rooms::Room> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::request::get_rooms::Room>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::request::login::LoginRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_password = <String>::sse_decode(deserializer);
        return crate::api::request::login::LoginRequest {
            username: var_username,
            password: var_password,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::request::get_room_players::Player {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_avatarColor = <String>::sse_decode(deserializer);
        let mut var_score = <u32>::sse_decode(deserializer);
        return crate::api::request::get_room_players::Player {
            username: var_username,
            avatar_color: var_avatarColor,
            score: var_score,
        };
    }
}

impl SseDecode for crate::api::request::get_rooms::Room {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_roomData =
            <crate::api::request::create_room::RoomData>::sse_decode(deserializer);
        let mut var_players =
            <Vec<crate::api::request::get_room_players::Player>>::sse_decode(deserializer);
        let mut var_isActive = <bool>::sse_decode(deserializer);
        return crate::api::request::get_rooms::Room {
            id: var_id,
            room_data: var_roomData,
            players: var_players,
            is_active: var_isActive,
        };
    }
}

impl SseDecode for crate::api::request::create_room::RoomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_maxPlayers = <u32>::sse_decode(deserializer);
        let mut var_questionCount = <u32>::sse_decode(deserializer);
        let mut var_timePerQuestion = <u32>::sse_decode(deserializer);
        return crate::api::request::create_room::RoomData {
            name: var_name,
            max_players: var_maxPlayers,
            question_count: var_questionCount,
            time_per_question: var_timePerQuestion,
        };
    }
}

impl SseDecode for crate::api::request::signup::SignupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_password = <String>::sse_decode(deserializer);
        let mut var_email = <String>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_phoneNumber = <String>::sse_decode(deserializer);
        let mut var_birthday = <String>::sse_decode(deserializer);
        return crate::api::request::signup::SignupRequest {
            username: var_username,
            password: var_password,
            email: var_email,
            address: var_address,
            phone_number: var_phoneNumber,
            birthday: var_birthday,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::request::update_user_data::UpdateUserDataRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_password = <Option<String>>::sse_decode(deserializer);
        let mut var_email = <String>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_phoneNumber = <String>::sse_decode(deserializer);
        let mut var_avatarColor = <String>::sse_decode(deserializer);
        return crate::api::request::update_user_data::UpdateUserDataRequest {
            password: var_password,
            email: var_email,
            address: var_address,
            phone_number: var_phoneNumber,
            avatar_color: var_avatarColor,
        };
    }
}

impl SseDecode for crate::api::request::get_user_data::UserData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_email = <String>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_phoneNumber = <String>::sse_decode(deserializer);
        let mut var_birthday = <String>::sse_decode(deserializer);
        let mut var_avatarColor = <String>::sse_decode(deserializer);
        let mut var_memberSince = <chrono::NaiveDateTime>::sse_decode(deserializer);
        return crate::api::request::get_user_data::UserData {
            username: var_username,
            email: var_email,
            address: var_address,
            phone_number: var_phoneNumber,
            birthday: var_birthday,
            avatar_color: var_avatarColor,
            member_since: var_memberSince,
        };
    }
}

impl SseDecode for crate::api::request::get_user_data::UserDataAndStatistics {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_userData =
            <crate::api::request::get_user_data::UserData>::sse_decode(deserializer);
        let mut var_userStatistics =
            <crate::api::request::get_user_data::UserStatistics>::sse_decode(deserializer);
        return crate::api::request::get_user_data::UserDataAndStatistics {
            user_data: var_userData,
            user_statistics: var_userStatistics,
        };
    }
}

impl SseDecode for crate::api::request::get_user_data::UserStatistics {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_averageAnswerTime = <Option<u32>>::sse_decode(deserializer);
        let mut var_correctAnswers = <u32>::sse_decode(deserializer);
        let mut var_wrongAnswers = <u32>::sse_decode(deserializer);
        let mut var_totalAnswers = <u32>::sse_decode(deserializer);
        let mut var_totalGames = <u32>::sse_decode(deserializer);
        let mut var_score = <u32>::sse_decode(deserializer);
        return crate::api::request::get_user_data::UserStatistics {
            average_answer_time: var_averageAnswerTime,
            correct_answers: var_correctAnswers,
            wrong_answers: var_wrongAnswers,
            total_answers: var_totalAnswers,
            total_games: var_totalGames,
            score: var_score,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        9 => wire_Session_create_room_impl(port, ptr, rust_vec_len, data_len),
        10 => wire_Session_get_highscores_impl(port, ptr, rust_vec_len, data_len),
        8 => wire_Session_get_room_players_impl(port, ptr, rust_vec_len, data_len),
        7 => wire_Session_get_rooms_impl(port, ptr, rust_vec_len, data_len),
        5 => wire_Session_get_user_data_impl(port, ptr, rust_vec_len, data_len),
        2 => wire_Session_login_impl(port, ptr, rust_vec_len, data_len),
        4 => wire_Session_logout_impl(port, ptr, rust_vec_len, data_len),
        3 => wire_Session_signup_impl(port, ptr, rust_vec_len, data_len),
        6 => wire_Session_update_user_data_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire_error_format_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Session> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Session> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Session>> for Session {
    fn into_into_dart(self) -> FrbWrapper<Session> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::Error {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::Error::ServerConnectionError(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::RequestSerializationError(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::ResponseDeserializationError(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::RequestTooBig => [3.into_dart()].into_dart(),
            crate::api::error::Error::ResponseError(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::InvalidResponseCode(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::LoginError(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::SignupError(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::LogoutError => [8.into_dart()].into_dart(),
            crate::api::error::Error::InvalidAddress(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::InternalServerError => [10.into_dart()].into_dart(),
            crate::api::error::Error::UpdateUserDataError(field0) => {
                [11.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::InvalidRoomId(field0) => {
                [12.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::Error::CouldNotCreateRoom => [13.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::error::Error {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::Error> for crate::api::error::Error {
    fn into_into_dart(self) -> crate::api::error::Error {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::login::LoginRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.username.into_into_dart().into_dart(),
            self.password.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::login::LoginRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::login::LoginRequest>
    for crate::api::request::login::LoginRequest
{
    fn into_into_dart(self) -> crate::api::request::login::LoginRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::get_room_players::Player {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.username.into_into_dart().into_dart(),
            self.avatar_color.into_into_dart().into_dart(),
            self.score.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::get_room_players::Player
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::get_room_players::Player>
    for crate::api::request::get_room_players::Player
{
    fn into_into_dart(self) -> crate::api::request::get_room_players::Player {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::get_rooms::Room {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.room_data.into_into_dart().into_dart(),
            self.players.into_into_dart().into_dart(),
            self.is_active.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::get_rooms::Room
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::get_rooms::Room>
    for crate::api::request::get_rooms::Room
{
    fn into_into_dart(self) -> crate::api::request::get_rooms::Room {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::create_room::RoomData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.max_players.into_into_dart().into_dart(),
            self.question_count.into_into_dart().into_dart(),
            self.time_per_question.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::create_room::RoomData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::create_room::RoomData>
    for crate::api::request::create_room::RoomData
{
    fn into_into_dart(self) -> crate::api::request::create_room::RoomData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::signup::SignupRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.username.into_into_dart().into_dart(),
            self.password.into_into_dart().into_dart(),
            self.email.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.phone_number.into_into_dart().into_dart(),
            self.birthday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::signup::SignupRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::signup::SignupRequest>
    for crate::api::request::signup::SignupRequest
{
    fn into_into_dart(self) -> crate::api::request::signup::SignupRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::request::update_user_data::UpdateUserDataRequest
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.password.into_into_dart().into_dart(),
            self.email.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.phone_number.into_into_dart().into_dart(),
            self.avatar_color.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::update_user_data::UpdateUserDataRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::update_user_data::UpdateUserDataRequest>
    for crate::api::request::update_user_data::UpdateUserDataRequest
{
    fn into_into_dart(self) -> crate::api::request::update_user_data::UpdateUserDataRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::get_user_data::UserData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.username.into_into_dart().into_dart(),
            self.email.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.phone_number.into_into_dart().into_dart(),
            self.birthday.into_into_dart().into_dart(),
            self.avatar_color.into_into_dart().into_dart(),
            self.member_since.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::get_user_data::UserData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::get_user_data::UserData>
    for crate::api::request::get_user_data::UserData
{
    fn into_into_dart(self) -> crate::api::request::get_user_data::UserData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::get_user_data::UserDataAndStatistics {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.user_data.into_into_dart().into_dart(),
            self.user_statistics.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::get_user_data::UserDataAndStatistics
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::get_user_data::UserDataAndStatistics>
    for crate::api::request::get_user_data::UserDataAndStatistics
{
    fn into_into_dart(self) -> crate::api::request::get_user_data::UserDataAndStatistics {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::request::get_user_data::UserStatistics {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.average_answer_time.into_into_dart().into_dart(),
            self.correct_answers.into_into_dart().into_dart(),
            self.wrong_answers.into_into_dart().into_dart(),
            self.total_answers.into_into_dart().into_dart(),
            self.total_games.into_into_dart().into_dart(),
            self.score.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::request::get_user_data::UserStatistics
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::request::get_user_data::UserStatistics>
    for crate::api::request::get_user_data::UserStatistics
{
    fn into_into_dart(self) -> crate::api::request::get_user_data::UserStatistics {
        self
    }
}

impl SseEncode for Session {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.timestamp_micros(), serializer);
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Session>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::error::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::Error::ServerConnectionError(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::RequestSerializationError(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::ResponseDeserializationError(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::RequestTooBig => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::error::Error::ResponseError(field0) => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::InvalidResponseCode(field0) => {
                <i32>::sse_encode(5, serializer);
                <u8>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::LoginError(field0) => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::SignupError(field0) => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::LogoutError => {
                <i32>::sse_encode(8, serializer);
            }
            crate::api::error::Error::InvalidAddress(field0) => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::InternalServerError => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::error::Error::UpdateUserDataError(field0) => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::InvalidRoomId(field0) => {
                <i32>::sse_encode(12, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::Error::CouldNotCreateRoom => {
                <i32>::sse_encode(13, serializer);
            }
        }
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::api::request::get_room_players::Player> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::request::get_room_players::Player>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::request::get_rooms::Room> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::request::get_rooms::Room>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::request::login::LoginRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.username, serializer);
        <String>::sse_encode(self.password, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::request::get_room_players::Player {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.username, serializer);
        <String>::sse_encode(self.avatar_color, serializer);
        <u32>::sse_encode(self.score, serializer);
    }
}

impl SseEncode for crate::api::request::get_rooms::Room {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <crate::api::request::create_room::RoomData>::sse_encode(self.room_data, serializer);
        <Vec<crate::api::request::get_room_players::Player>>::sse_encode(self.players, serializer);
        <bool>::sse_encode(self.is_active, serializer);
    }
}

impl SseEncode for crate::api::request::create_room::RoomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u32>::sse_encode(self.max_players, serializer);
        <u32>::sse_encode(self.question_count, serializer);
        <u32>::sse_encode(self.time_per_question, serializer);
    }
}

impl SseEncode for crate::api::request::signup::SignupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.username, serializer);
        <String>::sse_encode(self.password, serializer);
        <String>::sse_encode(self.email, serializer);
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.phone_number, serializer);
        <String>::sse_encode(self.birthday, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::request::update_user_data::UpdateUserDataRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.password, serializer);
        <String>::sse_encode(self.email, serializer);
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.phone_number, serializer);
        <String>::sse_encode(self.avatar_color, serializer);
    }
}

impl SseEncode for crate::api::request::get_user_data::UserData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.username, serializer);
        <String>::sse_encode(self.email, serializer);
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.phone_number, serializer);
        <String>::sse_encode(self.birthday, serializer);
        <String>::sse_encode(self.avatar_color, serializer);
        <chrono::NaiveDateTime>::sse_encode(self.member_since, serializer);
    }
}

impl SseEncode for crate::api::request::get_user_data::UserDataAndStatistics {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::request::get_user_data::UserData>::sse_encode(self.user_data, serializer);
        <crate::api::request::get_user_data::UserStatistics>::sse_encode(
            self.user_statistics,
            serializer,
        );
    }
}

impl SseEncode for crate::api::request::get_user_data::UserStatistics {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.average_answer_time, serializer);
        <u32>::sse_encode(self.correct_answers, serializer);
        <u32>::sse_encode(self.wrong_answers, serializer);
        <u32>::sse_encode(self.total_answers, serializer);
        <u32>::sse_encode(self.total_games, serializer);
        <u32>::sse_encode(self.score, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
